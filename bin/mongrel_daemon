#!/usr/bin/env ruby

require 'rubygems'
require 'logger'
require 'aurita'

require 'mongrel'
require 'yaml'
require 'zlib'

begin

project_name = ARGV[0]
port         = ARGV[1]
port       ||= 3000
port         = port.to_i
gatling      = ARGV[2] == 'gatling'
short        = ARGV[2] == 'short'
verbosive    = ARGV[2] == '-v'
kill_old     = ARGV[3] == '-k'
if ['-vk', '-kv'].include?(ARGV[2]) then
  verbosive = true
  kill_old  = true
end

if !project_name then
  puts "Usage: "
  puts ""
  puts "  daemon <project_name> <port> [mode]"
  puts ""
  puts "Following optional modes are supported: "
  puts "  gatling - Serve (short) requests, without session handling"
  puts "  short   - Serve short requests with session handling"
  puts ""
  exit
end

logfile = "/var/log/aurita/aurita_#{project_name}_#{port}_debug.log"


if verbosive then
  Lore.enable_logging
  Lore.enable_query_log
  Lore.logfile                       = logfile
  Lore.query_logfile                 = logfile
  Lore.logger.level                  = Logger::DEBUG
  Lore.query_logger.level            = Logger::DEBUG
  Aurita::Configuration.sys_log_path = logfile
  Aurita::Configuration.run_log_path = logfile
  STDERR.puts "\nServer log is #{logfile}\n"
else
  Lore.disable_logging
  Lore.disable_query_log
  Lore.logger.level                  = Logger::ERROR
  Lore.logfile                       = logfile
  Lore.query_logger.level            = Logger::ERROR
  Aurita::Configuration.sys_log_path = false
  Aurita::Configuration.run_log_path = false
end

if kill_old then
  # TODO: This is really quick'n'dirty
  command = "ps aux | grep 'mongrel_daemon #{project_name} #{port}' | tail -n 2 | head -n 1 | awk '{print $2}' | xargs sudo kill -9 " 
  system(command)
end

Aurita.load_project project_name.to_sym
Aurita.bootstrap

Aurita.import :handler, :mongrel_daemon

OPTIONS = {
  :port            => port,
  :ip              => "0.0.0.0",
  :server_root     => Aurita.project.base_path + '/public/', 
  :compress        => true, 
  :chunked         => true
}
# Gatling mode is as fast as can be, but without 
# sessions, e.g. only public services are available. 
if gatling then
  OPTIONS[:chunked]     = false
  OPTIONS[:no_sessions] = true
# Short mode is for requests that need session 
# handling ( => user identification) but will 
# return short responses. 
elsif short then
  OPTIONS[:chunked]     = false
  OPTIONS[:no_sessions] = false
end

web_server = Aurita::Mongrel_Daemon.new(OPTIONS)
daemon_logger = ::Logger.new(logfile)
daemon_logger.progname = "(Port #{port})"
web_server.logger = daemon_logger
web_server.run

rescue ::Exception => e
  STDERR.puts e.message
  e.backtrace.each { |l|
    STDERR.puts l
  }
end

